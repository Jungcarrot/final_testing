#include <mysql.h>  // MySQL 데이터베이스와 연결하기 위한 헤더 파일 포함
#include <iostream>  // 입출력을 위한 헤더 파일 포함
#include <string>  // 문자열 처리를 위한 헤더 파일 포함
#include <vector>  // 벡터 사용을 위한 헤더 파일 포함
#include <unordered_map>  // 해시 맵 자료구조를 사용하기 위한 헤더 파일 포함
#include <ctime>  // 시간 관련 기능을 사용하기 위한 헤더 파일 포함
#include <algorithm>  // 정렬을 위한 헤더 파일 포함
#include <stdio.h>

using namespace std;

class User {
public:
    int uid;  // 사용자 고유 ID
    string loginID;  // 로그인 ID
    string nickName;  // 닉네임
    string password;  // 비밀번호
    string apiId;  // 외부 API ID

    // 기본 생성자
    User() : uid(0), loginID(""), nickName(""), password(""), apiId("") {}

    // 매개변수가 있는 생성자
    User(int uid, string loginID, string nickName, string password, string apiId)
        : uid(uid), loginID(loginID), nickName(nickName), password(password), apiId(apiId) {
    }
};

// 동물병원 클래스 정의
class Vet {
public:
    int VetID;  // 병원 고유 ID
    string Vetname;  // 병원 이름
    string Vetaddress;  // 병원 주소
    string district;  // 지역 코드
    string VetphoneNumber;  // 병원 전화번호
    bool Vetopen24Hours;  // 24시간 운영 여부

    // 기본 생성자
    Vet() : VetID(0), Vetname(""), Vetaddress(""), district(""), VetphoneNumber(""), Vetopen24Hours(false) {}

    // 매개변수가 있는 생성자
    Vet(int id, string name, string address, string dist, string phone, bool open24)
        : VetID(id), Vetname(name), Vetaddress(address), district(dist), VetphoneNumber(phone), Vetopen24Hours(open24) {
    }
};

// 사용자 데이터를 저장하기 위한 맵
unordered_map<int, User> users;
// 동물병원 정보를 저장하기 위한 벡터
vector<Vet> vets;

// 데이터베이스 연결 정보
const char* host = "127.0.0.1";
const char* user = "root";
const char* password = "1206";  // MySQL 비밀번호
const char* database = "software";

// 데이터베이스 연결 설정 함수
MYSQL* connectDatabase() {
    // MySQL 객체 초기화
    MYSQL* conn = mysql_init(nullptr);
    if (conn == nullptr) {
        cerr << "mysql_init() failed\n";
        return nullptr;
    }

    // 데이터베이스 연결
    if (mysql_real_connect(conn, host, user, password, database, 3306, nullptr, 0) == nullptr) {
        cerr << "mysql_real_connect() failed\n";
        mysql_close(conn);
        return nullptr;
    }

    return conn;  // 성공 시 연결 객체 반환
}

// UserData 테이블에서 사용자 데이터를 불러오는 함수
void loadUsersFromDatabase(MYSQL* conn) {
    // UserData 테이블에서 모든 사용자 데이터를 가져오는 쿼리 실행
    if (mysql_query(conn, "SELECT * FROM UserData")) {
        cerr << "SELECT * FROM UserData failed. Error: " << mysql_error(conn) << endl;
        return;
    }

    // 쿼리 결과 저장
    MYSQL_RES* res = mysql_store_result(conn);
    if (res == nullptr) {
        cerr << "mysql_store_result() failed. Error: " << mysql_error(conn) << endl;
        return;
    }

    // 결과 집합에서 각 행을 반복하여 사용자 데이터 불러오기
    MYSQL_ROW row;
    while ((row = mysql_fetch_row(res))) {
        int uid = atoi(row[0]);  // 사용자 ID
        string loginID = row[2];  // 로그인 ID
        string nickName = row[1];  // 닉네임
        string password = row[4];  // 비밀번호
        string apiId = row[3];  // API ID

        // User 객체 생성 후 사용자 맵에 추가
        User newUser(uid, loginID, nickName, password, apiId);
        users[uid] = newUser;

        // 콘솔에 사용자 정보 출력
        cout << "User ID: " << uid << ", Login ID: " << loginID << ", Nickname: " << nickName
            << ", Password: " << password << ", API ID: " << apiId << endl;
    }

    // 결과 집합 메모리 해제
    mysql_free_result(res);
    cout << "Users loaded successfully from the database." << endl;

}

int main() {
    // 데이터베이스 연결
    MYSQL* conn = connectDatabase();
    if (conn == nullptr) {
        cerr << "Database connection failed." << endl;
        return 1;
    }

    // 사용자 데이터 불러오기
    loadUsersFromDatabase(conn);

    // 데이터베이스 연결 종료
    mysql_close(conn);

    return 0;
}
